# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
#
#   litteral names = return
#                    tab
#                    space
#                    backspace
#                    escape
#                    fn
#                    cmd
#                    lcmd
#                    rcmd
#                    shift
#                    lshift
#                    rshift
#                    alt
#                    lalt
#                    ralt
#                    ctrl
#                    lctrl
#                    rctrl
#
#   combinations = hyper = shift + alt + cmd + ctrl
#                  meh   = shift + alt + ctrl
#

# ##################### #
#                       #
#    RELOAD SERVICE     #
#                       #
# ##################### #

shift + ctrl - s : skhd --restart-service --config /Users/bdumesnildot/.config/skhd/.skhdrc
shift + ctrl - y : yabai --restart-service


# ##################### #
#                       #
#     APPLICATIONS      #
#                       #
# ##################### #

# num bar
hyper - 0x12 : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Visual Studio Code" # 0x12 = "&" or "1"
hyper - 0x13 : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Postman" # 0x13 = "é" or "2"
hyper - 0x1D : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "System Settings" # 0x1D = "à" or "0"
hyper - 0x1B : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Activity Monitor" # 0x1B = ")"

# special keys
hyper - space : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Finder"
hyper - return : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Warp"

# applications shortcuts
hyper - a : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Arc"
hyper - b : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Beeper"
hyper - c : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Jalia Dev"
hyper - d : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Docker Desktop"
## no i j k l  beacause they are used as vim navigation keys
hyper - m : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Spotify"
hyper - n : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Notion"
hyper - q : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Open WebUI"
hyper - o : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Microsoft Outlook"
hyper - s : /Users/bdumesnildot/.config/yabai/scripts/handleApps.sh "Slack"


# ##################### #
#                       #
#         YABAI         #
#                       #
# ##################### #

## LAYOUT MANAGEMENT
# toggle tiling / floating
rcmd - space : /Users/bdumesnildot/.config/yabai/scripts/toggleLayout.sh

## WINDOWS MANAGEMENT

# toggle window fullscreen zoom
rcmd + rshift - space : yabai -m window --toggle zoom-fullscreen
# float / unfloat window and center on screen
rcmd + rshift - f : yabai -m window --toggle float;\
                    yabai -m window --grid 4:4:1:1:2:2

# focus window
## loop through all windows
rcmd - 0x2B : /Users/bdumesnildot/.config/yabai/scripts/windowSwitch.sh # 0x2B = ";"
## loop through windows of thhe current display
rcmd - a : yabai -m window --focus next || yabai -m window --focus first
rcmd - z : yabai -m window --focus north
rcmd - d : yabai -m window --focus east
rcmd - s : yabai -m window --focus south
rcmd - q : yabai -m window --focus west

# focus display
rcmd + shift - z : yabai -m display --focus north
rcmd + shift - d : yabai -m display --focus east
rcmd + shift - s : yabai -m display --focus south
rcmd + shift - q : yabai -m display --focus west

# Move window to next / previous space
rcmd - 0x2F : /Users/bdumesnildot/.config/yabai/scripts/monitorSwitch.sh # 0x2F = ":"
ralt - 0x2F : /Users/bdumesnildot/.config/yabai/scripts/monitorSwitch.sh # 0x2F = ":"

# rotate tree
ralt - r : yabai -m space --rotate 90

# swap managed window
ralt - z : yabai -m window --swap north
ralt - d : yabai -m window --swap east
ralt - s : yabai -m window --swap south
ralt - q : yabai -m window --swap west

# increase window size
## dx
ralt + shift - q : yabai -m window --resize right:-20:0 || yabai -m window --resize left:-20:0
ralt + shift - d : yabai -m window --resize right:20:0 || yabai -m window --resize left:20:0
## dy
ralt + shift - z : yabai -m window --resize bottom:0:-20 || yabai -m window --resize top:0:-20
ralt + shift - s : yabai -m window --resize bottom:0:20 || yabai -m window --resize top:0:20